<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>程式狂想筆記</title>
        <link>https://malagege.github.io/blog/</link>
        <description>記錄著我接觸程式藝文</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Mon, 01 Apr 2024 23:13:07 &#43;0800</lastBuildDate>
            <atom:link href="https://malagege.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>CORS 解決方案：前端如何處理收不到 Response Header 的問題</title>
    <link>https://malagege.github.io/blog/posts/cors-solution-how-frontend-handles-not-receiving-response-header/</link>
    <pubDate>Mon, 01 Apr 2024 23:13:07 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/cors-solution-how-frontend-handles-not-receiving-response-header/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/dd62c69d-e398-4c2f-a78b-3b6e90dafe40" referrerpolicy="no-referrer">
            </div>最近我設計了一個 OAuth Token 驗證給前端串接，但發現前端無法抓取到我後端的 Response Header。經過一番研究，我發現問題出在 CORS 上。以前我對 CORS 都是簡單了解，沒想到 CORS 規範的內容如此豐富。這篇文章就是我對此進行深入研究的記錄。這篇還一點債了&hellip;
心智圖 因為 mermaid 無法用-，所以用_置換。
mindmap Same_Origin Policy Origin Tuple origin schema+host+port opaque origin file://.../xxx.html CORS 簡單請求 發送Request不會預檢 Request會送到Server Response 都會檢查 Access_Control_Allow_Origin 非簡單請求 發送Request會預檢 預檢沒過，Request不會送到Server Response 都會檢查 Access_Control_Allow_Origin CORS 容易忽略那些事 Request 不能隨意帶 Header JS不能隨意用 Response Header CORS 相關 Header Access_Control_Allow_Origin Access_Control_Allow_Methods Access_Control_Allow_Headers Access_Control_Max_Age Access_Control_Expose_Headers Access_Control_Allow_Credentials Origin Header Origin - HTTP | MDN 1 2 3 Origin: null Origin: &lt;scheme&gt;://&lt;hostname&gt; Origin: &lt;scheme&gt;://&lt;hostname&gt;:&lt;port&gt; 常見我們 AJAX 跨域會看到 HTTP 有 Origin Header 內容。]]></description>
</item>
<item>
    <title>探索 Console 進度條的實現方式</title>
    <link>https://malagege.github.io/blog/posts/exploring-console-progress-bar-implementation/</link>
    <pubDate>Mon, 01 Apr 2024 21:59:55 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/exploring-console-progress-bar-implementation/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/c9dea196-f447-4f38-854c-1fe59c158e8a" referrerpolicy="no-referrer">
            </div><p>我常常看到指令執行時可以做出進度條效果。雖然裝了 Python 的其他套件就可以做出來，但我這邊找到了一種原生 Console 的做法。我覺得這很有趣，所以特別記錄下來。</p>]]></description>
</item>
<item>
    <title>實作指南：使用 Linux Bridge 連接虛擬網路與設備廢棄</title>
    <link>https://malagege.github.io/blog/posts/connecting-virtual-network-with-various-devices-linux-bridge-implementation/</link>
    <pubDate>Thu, 29 Feb 2024 22:45:27 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/connecting-virtual-network-with-various-devices-linux-bridge-implementation/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/ece7b7c4-edc2-468b-b15a-b6cf26387ed5" referrerpolicy="no-referrer">
            </div><p>最近我需要讓 KVM 不透過設定路由，而是直接連接到現有網段。因此，我進一步研究<a href="https://malagege.github.io/blog/posts/%E7%B6%B2%E8%B7%AF%E6%96%B0%E6%89%8B-veth-pair-%E5%AF%A6%E4%BD%9C%E7%AD%86%E8%A8%98/" target="_blank" rel="noopener noreffer ">網路新手虛擬網路設備 veth pair 實作筆記 - 程式狂想筆記</a>這篇文章的主題。在這裡，我將簡單介紹如何操作 Linux Bridge，讓多種端口可以互相連接。</p>]]></description>
</item>
<item>
    <title>API 規格文件：簡單快速設計工具</title>
    <link>https://malagege.github.io/blog/posts/quick-api-spec-tool/</link>
    <pubDate>Thu, 29 Feb 2024 22:15:03 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/quick-api-spec-tool/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/cb234ec0-b9fc-4b98-8fa9-7c2e16cf979a" referrerpolicy="no-referrer">
            </div><p>使用快速規劃 API 規格文件的好處是，它可以幫助開發團隊更有效地溝通和協作。透過清晰的 API 規格文件，團隊成員可以快速了解 API 的功能、輸入和輸出，並且可以更容易地進行開發和測試。此外，API 規格文件還可以提供給其他團隊或合作夥伴，以便他們能夠更好地理解和使用你的 API。</p>]]></description>
</item>
<item>
    <title>Docker Compose 強制重啟 Container</title>
    <link>https://malagege.github.io/blog/posts/docker-compose-restart-container/</link>
    <pubDate>Wed, 31 Jan 2024 21:19:08 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/docker-compose-restart-container/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/7cd3b5ae-9f68-439d-b08e-1d1e9e4a1c8b" referrerpolicy="no-referrer">
            </div><p>在 Docker Compose 的早期版本中，連續啟動兩次會導致容器重啟，但在某一版之後，這種行為已經被改變。然而，有時我們可能需要手動重啟容器。在這篇文章中，我將介紹如何重啟容器。</p>]]></description>
</item>
<item>
    <title>Entity Framework Core：FromSqlRaw 與 FromSqlInterpolated 的使用與差異</title>
    <link>https://malagege.github.io/blog/posts/entity-framework-core-fromsqlraw-and-fromsqlinterpolated/</link>
    <pubDate>Sun, 28 Jan 2024 21:11:27 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/entity-framework-core-fromsqlraw-and-fromsqlinterpolated/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/9a027353-a969-4a6a-bc93-88d425ffdf8e" referrerpolicy="no-referrer">
            </div><p>Entity Framework Core (EF Core) 是一個開源的、跨平台的資料庫存取技術，它可以讓開發者用 .NET 對資料庫進行操作，而不需要寫 SQL 語句。然而，有時候我們還是需要直接執行 SQL 查詢，這時候 EF Core 提供了 <code>FromSqlRaw</code> 和 <code>FromSqlInterpolated</code> 兩種方法。</p>
<p>這兩種方法的主要差異在於，<code>FromSqlRaw</code> 需要手動參數化查詢，而 <code>FromSqlInterpolated</code> 則會自動參數化查詢。如果不正確使用，可能會使應用程式暴露於 SQL 注入攻擊。</p>
<p>以下是一些使用這兩種方法的例子和解釋：</p>]]></description>
</item>
<item>
    <title>不改系統時間測試時間神器：faketime</title>
    <link>https://malagege.github.io/blog/posts/%E4%B8%8D%E6%94%B9%E7%B3%BB%E7%B5%B1%E6%99%82%E9%96%93%E6%B8%AC%E8%A9%A6%E6%99%82%E9%96%93%E7%A5%9E%E5%99%A8-faketime/</link>
    <pubDate>Sun, 28 Jan 2024 20:40:23 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/%E4%B8%8D%E6%94%B9%E7%B3%BB%E7%B5%B1%E6%99%82%E9%96%93%E6%B8%AC%E8%A9%A6%E6%99%82%E9%96%93%E7%A5%9E%E5%99%A8-faketime/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/39e72273-51c3-4a0e-b791-5656bf43fac1" referrerpolicy="no-referrer">
            </div>faketime 是一個強大的工具，它可以讓你在測試中操控時間。這篇文章將教你如何在 Ubuntu 上安裝和使用 faketime。
Ubuntu 安裝 首先，我們需要更新我們的套件列表，然後安裝 faketime：
1 2 3 4 # 更新套件列表 sudo apt update # 安裝 faketime sudo apt install faketime 接著，我們需要設定一個環境變數，讓系統知道 faketime 的位置：
1 export LD_PRELOAD=/usr/lib/x86_64-linux-gnu/faketime/libfaketime.so.1 Mac 安裝 Warning 請注意，我沒有 Mac ，所以無法親自測試這段。如果你在使用過程中遇到問題，請參考 faketime 的官方文件或者在網路上尋找解答。 在 Mac 上，我們可以使用 Homebrew 來安裝 faketime：
1 brew install libfaketime 然後，我們需要設定兩個環境變數。這兩個環境變數會讓系統在執行程式時，強制使用我們指定的動態連結庫：
1 2 export DYLD_FORCE_FLAT_NAMESPACE=1 export DYLD_INSERT_LIBRARIES=/path/to/libfaketime.1.dylib 但我沒有 Mac ，所以無法測試這段
指令相關操作 在這部分，我們將介紹如何使用 faketime 來操控時間。
faketime 指令包起來 我們可以使用 faketime 來改變指令的執行時間。例如，我們可以將時間設定為上週五下午五點，或者設定為 2018 年 12 月 24 日的 08:15:42：]]></description>
</item>
<item>
    <title>關掉 Windows Server 自動更新方法</title>
    <link>https://malagege.github.io/blog/posts/%E9%97%9C%E6%8E%89-Windows-Server-%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0%E6%96%B9%E6%B3%95/</link>
    <pubDate>Wed, 10 Jan 2024 20:55:15 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/%E9%97%9C%E6%8E%89-Windows-Server-%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/efac2073-5d54-44f6-accc-763b57982be9" referrerpolicy="no-referrer">
            </div><p>最近公司電腦常常莫名其妙關機，我們很常因為電腦重開導致本地 SQL Server 還沒開機完，IIS 站台 .Net 程式無法正常執行。前端也因為 pm2 沒登入沒有啟動。後來發現是 Windows 更新造成的，所以才找把它關掉方法。</p>]]></description>
</item>
<item>
    <title>SQL Server 與 MySQL 中唯一索引鍵對 NULL 值的處理差異</title>
    <link>https://malagege.github.io/blog/posts/SQL-Server-%E8%88%87-MySQL-%E4%B8%AD%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E9%8D%B5%E5%B0%8D-NULL-%E5%80%BC%E7%9A%84%E8%99%95%E7%90%86%E5%B7%AE%E7%95%B0/</link>
    <pubDate>Thu, 21 Dec 2023 22:16:29 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/SQL-Server-%E8%88%87-MySQL-%E4%B8%AD%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E9%8D%B5%E5%B0%8D-NULL-%E5%80%BC%E7%9A%84%E8%99%95%E7%90%86%E5%B7%AE%E7%95%B0/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/d94e8080-09ac-491a-9fa0-cab70b1f248d" referrerpolicy="no-referrer">
            </div><p>最近我在 SQL Server 中設定了 Unique Key，目的是為了防止因程式錯誤導致重複的資料被插入。然而，我沒有考慮到 null 值也會被視為重複的資料。在 SQL Server 中，唯一索引鍵預設會阻擋重複的 null 值，但在 MySQL 中，唯一索引鍵則不會阻擋重複的 null 值。</p>]]></description>
</item>
<item>
    <title>快速建置 Gokapi 分享檔案服務</title>
    <link>https://malagege.github.io/blog/posts/%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AE-Gokapi-%E5%88%86%E4%BA%AB%E6%AA%94%E6%A1%88%E6%9C%8D%E5%8B%99/</link>
    <pubDate>Sun, 10 Dec 2023 23:09:33 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%BD%AE-Gokapi-%E5%88%86%E4%BA%AB%E6%AA%94%E6%A1%88%E6%9C%8D%E5%8B%99/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/fee6e022-578b-40cb-a832-33f497831f2c" referrerpolicy="no-referrer">
            </div><p>Gokapi 是一個 Firefox Send 的替代品，唯一差別需要登入才能上傳，刪除檔案已小時為單位。</p>]]></description>
</item>
</channel>
</rss>
