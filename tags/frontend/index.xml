<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Frontend - Tag - 程式狂想筆記</title>
        <link>https://malagege.github.io/blog/tags/frontend/</link>
        <description>Frontend - Tag - 程式狂想筆記</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Mon, 01 Apr 2024 23:13:07 &#43;0800</lastBuildDate><atom:link href="https://malagege.github.io/blog/tags/frontend/" rel="self" type="application/rss+xml" /><item>
    <title>CORS 解決方案：前端如何處理收不到 Response Header 的問題</title>
    <link>https://malagege.github.io/blog/posts/cors-solution-how-frontend-handles-not-receiving-response-header/</link>
    <pubDate>Mon, 01 Apr 2024 23:13:07 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/cors-solution-how-frontend-handles-not-receiving-response-header/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/dd62c69d-e398-4c2f-a78b-3b6e90dafe40" referrerpolicy="no-referrer">
            </div><p>最近我設計了一個 OAuth Token 驗證給前端串接，但發現前端無法抓取到我後端的 Response Header。經過一番研究，我發現問題出在 CORS 上。以前我對 CORS 都是簡單了解，沒想到 CORS 規範的內容如此豐富。這篇文章就是我對此進行深入研究的記錄。這篇還一點債了&hellip;</p>
<h2 id="心智圖">心智圖</h2>
<p>因為 mermaid 無法用<code>-</code>，所以用<code>_</code>置換。</p>
<div class="mermaid">mindmap
  Same_Origin Policy
    Origin
        Tuple origin
            schema+host+port
        opaque origin
            file://.../xxx.html
    CORS
        簡單請求
            發送Request不會預檢
            Request會送到Server
            Response 都會檢查 Access_Control_Allow_Origin 
        非簡單請求
            發送Request會預檢
            預檢沒過，Request不會送到Server
            Response 都會檢查 Access_Control_Allow_Origin 
    CORS 容易忽略那些事
        Request 不能隨意帶 Header
        JS不能隨意用 Response Header
    CORS 相關 Header
        Access_Control_Allow_Origin
        Access_Control_Allow_Methods
        Access_Control_Allow_Headers
        Access_Control_Max_Age
        Access_Control_Expose_Headers
        Access_Control_Allow_Credentials
</div><h2 id="origin-header">Origin Header</h2>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Origin" target="_blank" rel="noopener noreffer ">Origin - HTTP | MDN</a></li>
</ul>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span><span class="lnt">2
</span><span class="lnt">3
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-fallback" data-lang="fallback"><span class="line"><span class="cl">Origin: null
</span></span><span class="line"><span class="cl">Origin: &lt;scheme&gt;://&lt;hostname&gt;
</span></span><span class="line"><span class="cl">Origin: &lt;scheme&gt;://&lt;hostname&gt;:&lt;port&gt;
</span></span></code></pre></td></tr></table>
</div>
</div><p>常見我們 AJAX 跨域會看到 HTTP 有 <code>Origin</code> Header 內容。</p>]]></description>
</item>
<item>
    <title>Visual Studio 使用 LibMan 管理器</title>
    <link>https://malagege.github.io/blog/posts/Visual-Studio-%E4%BD%BF%E7%94%A8-LibMan-%E7%AE%A1%E7%90%86%E5%99%A8/</link>
    <pubDate>Wed, 07 Dec 2022 22:52:29 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/Visual-Studio-%E4%BD%BF%E7%94%A8-LibMan-%E7%AE%A1%E7%90%86%E5%99%A8/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/206212985-e69b6ca3-9b3d-478f-a100-33c6ade72c1e.png" referrerpolicy="no-referrer">
            </div><p>LibMan 簡單是給淺入前端開發用的，假如做前後端分離應該是用不到這個的。</p>
<p>功能大致上有:</p>
<ul>
<li>一個量級的管理工具</li>
<li>他可以從CDN下載下來</li>
<li>必須在VS 2017 以後版本才能下載</li>
</ul>]]></description>
</item>
</channel>
</rss>
