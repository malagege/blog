<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Url - Tag - 程式狂想筆記</title>
        <link>https://malagege.github.io/blog/tags/url/</link>
        <description>Url - Tag - 程式狂想筆記</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sun, 12 Jan 2025 21:30:11 &#43;0800</lastBuildDate><atom:link href="https://malagege.github.io/blog/tags/url/" rel="self" type="application/rss+xml" /><item>
    <title>如何避免程式組 URL 出錯</title>
    <link>https://malagege.github.io/blog/posts/how_to_avoid_url_errors/</link>
    <pubDate>Sun, 12 Jan 2025 21:30:11 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/how_to_avoid_url_errors/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/user-attachments/assets/42c20617-076d-45c2-b876-a7f663bf2ec5" referrerpolicy="no-referrer">
            </div>前正子專案因為設定檔有人網址會多 / 導致程式一些狀況，公司有人有特別寫組語法方法，這邊我思考正常內建方法可不可以解決這個問題，怎麼沒有人寫好 Library 分享給別人使用？探討有什麼更好方式去解這個問題。
心智圖 mindmap (程式組 Url 方法) 操作 Url 方法 .Net UriBuilder 物件 Java Uri 物件 JavaScript URL 物件 設定 QueryString 方法 .Net NameValueCollection Java MultiValuedMap 非原生 JavaScript URLSearchParams .Net 實作方法 使用 UriBuilder UriBuilder 是一個用於建立和操作 URI 的類別，適用於需要動態生成或修改 URI 的場景。它的用途包括構建 API 請求、處理用戶輸入的 URL、以及在應用程序中動態生成鏈接。相較於單純使用字串來紀錄 URI，它有以下的優點：
安全性：UriBuilder 會自動處理 URI 中的特殊字元和編碼問題，避免了手動操作可能產生的錯誤。 1 2 3 4 5 6 7 8 9 UriBuilder uriBuilder = new UriBuilder { Scheme = &#34;https&#34;, Host = &#34;example.]]></description>
</item>
<item>
    <title>Hexo設定blog子資料夾網址</title>
    <link>https://malagege.github.io/blog/posts/Hexo%E8%A8%AD%E5%AE%9Ablog%E5%AD%90%E8%B3%87%E6%96%99%E5%A4%BE%E7%B6%B2%E5%9D%80/</link>
    <pubDate>Sun, 08 Apr 2018 21:18:09 &#43;0000</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/Hexo%E8%A8%AD%E5%AE%9Ablog%E5%AD%90%E8%B3%87%E6%96%99%E5%A4%BE%E7%B6%B2%E5%9D%80/</guid>
    <description><![CDATA[<p>設定筆記紀錄</p>]]></description>
</item>
</channel>
</rss>
