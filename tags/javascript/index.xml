<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Javascript - Tag - 程式狂想筆記</title>
        <link>https://malagege.github.io/blog/tags/javascript/</link>
        <description>Javascript - Tag - 程式狂想筆記</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Thu, 31 Jul 2025 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://malagege.github.io/blog/tags/javascript/" rel="self" type="application/rss+xml" /><item>
    <title>JavaScript 取得 URL Query String 與 Hash 實用技巧</title>
    <link>https://malagege.github.io/blog/posts/javascript-get-url-query-string-hash/</link>
    <pubDate>Thu, 31 Jul 2025 00:00:00 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/javascript-get-url-query-string-hash/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://imgpoi.com/i/A779H9.png" referrerpolicy="no-referrer">
            </div><p>在前端開發中，經常需要從網址取得 Query String 參數，例如做頁面參數傳遞、SPA 路由、或是根據網址參數顯示不同內容。這篇文章會介紹幾種常見的 JavaScript 取得 Query String 方法，並延伸說明 <code>location.hash</code>、History API 及 URL API 的應用。</p>]]></description>
</item>
<item>
    <title>如何避免程式組 URL 出錯</title>
    <link>https://malagege.github.io/blog/posts/how_to_avoid_url_errors/</link>
    <pubDate>Sun, 12 Jan 2025 21:30:11 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/how_to_avoid_url_errors/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/user-attachments/assets/42c20617-076d-45c2-b876-a7f663bf2ec5" referrerpolicy="no-referrer">
            </div>前正子專案因為設定檔有人網址會多 / 導致程式一些狀況，公司有人有特別寫組語法方法，這邊我思考正常內建方法可不可以解決這個問題，怎麼沒有人寫好 Library 分享給別人使用？探討有什麼更好方式去解這個問題。
心智圖 mindmap (程式組 Url 方法) 操作 Url 方法 .Net UriBuilder 物件 Java Uri 物件 JavaScript URL 物件 設定 QueryString 方法 .Net NameValueCollection Java MultiValuedMap 非原生 JavaScript URLSearchParams .Net 實作方法 使用 UriBuilder UriBuilder 是一個用於建立和操作 URI 的類別，適用於需要動態生成或修改 URI 的場景。它的用途包括構建 API 請求、處理用戶輸入的 URL、以及在應用程序中動態生成鏈接。相較於單純使用字串來紀錄 URI，它有以下的優點：
安全性：UriBuilder 會自動處理 URI 中的特殊字元和編碼問題，避免了手動操作可能產生的錯誤。 1 2 3 4 5 6 7 8 9 UriBuilder uriBuilder = new UriBuilder { Scheme = &#34;https&#34;, Host = &#34;example.]]></description>
</item>
<item>
    <title>JavaScript 如何處理長整數 (long/bigint) 數值的問題</title>
    <link>https://malagege.github.io/blog/posts/JavaScript-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E9%95%B7%E6%95%B4%E6%95%B8-long-bigint-%E6%95%B8%E5%80%BC%E7%9A%84%E5%95%8F%E9%A1%8C/</link>
    <pubDate>Sun, 10 Dec 2023 23:00:31 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/JavaScript-%E5%A6%82%E4%BD%95%E8%99%95%E7%90%86%E9%95%B7%E6%95%B4%E6%95%B8-long-bigint-%E6%95%B8%E5%80%BC%E7%9A%84%E5%95%8F%E9%A1%8C/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/2870d81e-04bf-42ff-bb57-97f107462a86" referrerpolicy="no-referrer">
            </div><p>最近發現 JS 無法正常 long (bigint) 數值長度，平常我們會很少用到，之前做報表也不需要吐給前端這個型別資料。但我今天發現這個，在某種情況我們會忽略這個情況。這邊順便做個紀錄。</p>]]></description>
</item>
<item>
    <title>JavaScript Sleep SetTimeout 非同步處理方法</title>
    <link>https://malagege.github.io/blog/posts/JavaScript-Sleep-SetTimeout-%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%99%95%E7%90%86%E6%96%B9%E6%B3%95/</link>
    <pubDate>Sun, 27 Aug 2023 22:39:34 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/JavaScript-Sleep-SetTimeout-%E9%9D%9E%E5%90%8C%E6%AD%A5%E8%99%95%E7%90%86%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/263536210-c18848cc-49d0-45c8-a4cf-50c0a5e7953f.png" referrerpolicy="no-referrer">
            </div><p>最近有一個情境，同一頁使用者會有持續呼叫API方法，但需要控制按鈕等前一個API呼叫，減少併發發生狀況，這邊就找了方法排除，有找到使用 <code>sleep</code> 方法去解決這個問題。</p>]]></description>
</item>
<item>
    <title>網頁響應式控制文字放大所小方法</title>
    <link>https://malagege.github.io/blog/posts/%E7%B6%B2%E9%A0%81%E9%9F%BF%E6%87%89%E5%BC%8F%E6%8E%A7%E5%88%B6%E6%96%87%E5%AD%97%E6%94%BE%E5%A4%A7%E6%89%80%E5%B0%8F%E6%96%B9%E6%B3%95/</link>
    <pubDate>Tue, 15 Aug 2023 22:39:43 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/%E7%B6%B2%E9%A0%81%E9%9F%BF%E6%87%89%E5%BC%8F%E6%8E%A7%E5%88%B6%E6%96%87%E5%AD%97%E6%94%BE%E5%A4%A7%E6%89%80%E5%B0%8F%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/260744150-12b69138-c39c-4ccb-ba7a-03a6b62d6e95.png" referrerpolicy="no-referrer">
            </div><p>很久沒寫前端相關文章，最近看到文字可以用 <code>vw</code> 控制放大縮小，這邊也有興趣了解，這邊簡單做個測試順便筆記。</p>]]></description>
</item>
<item>
    <title>axios 操作小記</title>
    <link>https://malagege.github.io/blog/posts/axios-%E6%93%8D%E4%BD%9C%E5%B0%8F%E8%A8%98/</link>
    <pubDate>Sun, 31 Jul 2022 02:19:47 &#43;0000</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/axios-%E6%93%8D%E4%BD%9C%E5%B0%8F%E8%A8%98/</guid>
    <description><![CDATA[<p>太久沒寫前端就忘了，簡單紀錄。</p>]]></description>
</item>
<item>
    <title>好用手機測試 WEB 工具(VConsole)</title>
    <link>https://malagege.github.io/blog/posts/%E5%A5%BD%E7%94%A8%E6%89%8B%E6%A9%9F%E6%B8%AC%E8%A9%A6-WEB-%E5%B7%A5%E5%85%B7-VConsole/</link>
    <pubDate>Sun, 31 Jul 2022 00:50:39 &#43;0000</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/%E5%A5%BD%E7%94%A8%E6%89%8B%E6%A9%9F%E6%B8%AC%E8%A9%A6-WEB-%E5%B7%A5%E5%85%B7-VConsole/</guid>
    <description><![CDATA[<p>LIFF 測試好用工具。</p>]]></description>
</item>
<item>
    <title>HTML5 Server-Sent Events(Eventsource) 一種傳輸API方式</title>
    <link>https://malagege.github.io/blog/posts/HTML5-Server-Sent-Events-Eventsource-%E4%B8%80%E7%A8%AE%E5%82%B3%E8%BC%B8API%E6%96%B9%E5%BC%8F/</link>
    <pubDate>Sun, 13 Feb 2022 23:21:58 &#43;0000</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/HTML5-Server-Sent-Events-Eventsource-%E4%B8%80%E7%A8%AE%E5%82%B3%E8%BC%B8API%E6%96%B9%E5%BC%8F/</guid>
    <description><![CDATA[<p>以前看這個沒有仔細看，以為就是瘋狂 AJAX 動作，很多網站沒教後端怎麼處理，最近看 API 書籍，裡面有講到 HTTP Streaming 東西(Server-Sent Events)，突然意識到這個機制是不一樣，但這個機制沒有普及，也有不少缺點，如Proxy代理緩存問題，所以很少看到網站使用這個。這邊就簡單紀錄。</p>]]></description>
</item>
<item>
    <title>Websocket 一些基本知識整理</title>
    <link>https://malagege.github.io/blog/posts/Websocket-%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AD%98%E6%95%B4%E7%90%86/</link>
    <pubDate>Sun, 13 Feb 2022 22:50:17 &#43;0000</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/Websocket-%E4%B8%80%E4%BA%9B%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AD%98%E6%95%B4%E7%90%86/</guid>
    <description><![CDATA[<h2 id="我的錯誤印象應該沒有人要看可跳過">我的錯誤印象(應該沒有人要看，可跳過)</h2>
<p>在看 websocket 之前，我以為 websocket 是在 HTTP 協定，因為跟 EventSource(server sent events)很像，只是是做單方面傳輸，又簡單看相關文章，EventSource會有Proxy問題，但是websocket 不會有問題，websocket 有 SLB問題。在文章都有提到 HTTP header 相關，開發工具也可以看到相關資訊，以為傳輸資料就是一般request/response，但最近時實作發現我錯了。</p>]]></description>
</item>
<item>
    <title>JS 使用 FileReader 讀取檔案方法和下載檔案(Blob)方法</title>
    <link>https://malagege.github.io/blog/posts/JS-%E4%BD%BF%E7%94%A8-FileReader-%E8%AE%80%E5%8F%96%E6%AA%94%E6%A1%88%E6%96%B9%E6%B3%95%E5%92%8C%E4%B8%8B%E8%BC%89%E6%AA%94%E6%A1%88-Blob-%E6%96%B9%E6%B3%95/</link>
    <pubDate>Sun, 07 Nov 2021 22:12:30 &#43;0000</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/JS-%E4%BD%BF%E7%94%A8-FileReader-%E8%AE%80%E5%8F%96%E6%AA%94%E6%A1%88%E6%96%B9%E6%B3%95%E5%92%8C%E4%B8%8B%E8%BC%89%E6%AA%94%E6%A1%88-Blob-%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<p>想畫個圖，有時候過很久再回來看這個就忘記怎麼用，但想簡單使用所以用 <code>sequenceDiagram</code> 來描述內容，哈哈，懶得自己畫圖描述。</p>]]></description>
</item>
</channel>
</rss>
