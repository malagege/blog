<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Api - Tag - 程式狂想筆記</title>
        <link>https://malagege.github.io/blog/tags/api/</link>
        <description>Api - Tag - 程式狂想筆記</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sun, 28 Apr 2024 21:27:05 &#43;0800</lastBuildDate><atom:link href="https://malagege.github.io/blog/tags/api/" rel="self" type="application/rss+xml" /><item>
    <title>如何在 HTTP 網頁中允許 HTTPS API 呼叫</title>
    <link>https://malagege.github.io/blog/posts/how-to-allow-https-api-calls-in-http-webpages/</link>
    <pubDate>Sun, 28 Apr 2024 21:27:05 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/how-to-allow-https-api-calls-in-http-webpages/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/4a1a01a1-47be-4114-88e3-a5619840016f" referrerpolicy="no-referrer">
            </div><p>在開發測試過程中，我們經常會遇到一些內部環境不是 HTTPS 的情況。雖然我們可以通過掛載證書來解決這個問題，但有時候現實的情況並不是我們能完全控制的。因此，我們需要進行一些設定，以便在這些環境下進行開發測試。</p>]]></description>
</item>
<item>
    <title>API 規格文件：簡單快速設計工具</title>
    <link>https://malagege.github.io/blog/posts/quick-api-spec-tool/</link>
    <pubDate>Thu, 29 Feb 2024 22:15:03 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/quick-api-spec-tool/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/cb234ec0-b9fc-4b98-8fa9-7c2e16cf979a" referrerpolicy="no-referrer">
            </div><p>使用快速規劃 API 規格文件的好處是，它可以幫助開發團隊更有效地溝通和協作。透過清晰的 API 規格文件，團隊成員可以快速了解 API 的功能、輸入和輸出，並且可以更容易地進行開發和測試。此外，API 規格文件還可以提供給其他團隊或合作夥伴，以便他們能夠更好地理解和使用你的 API。</p>]]></description>
</item>
<item>
    <title>API Blueprint 實用工具小記</title>
    <link>https://malagege.github.io/blog/posts/API-Blueprint-%E5%AF%A6%E7%94%A8%E5%B7%A5%E5%85%B7%E5%B0%8F%E8%A8%98/</link>
    <pubDate>Sun, 11 Jun 2023 20:31:37 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/API-Blueprint-%E5%AF%A6%E7%94%A8%E5%B7%A5%E5%85%B7%E5%B0%8F%E8%A8%98/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/244936533-a7a37ae6-bffb-451d-b6a6-3ae377864aa6.png" referrerpolicy="no-referrer">
            </div><p>最近不小心誤坑了 API Blueprint ，提醒大家轉 OpenAPI Specification (OAS) 才是王道。但還是最近找一下實用工具。</p>
<div class="details admonition warning open">
        <div class="details-summary admonition-title">
            <i class="icon fas fa-exclamation-triangle fa-fw" aria-hidden="true"></i>Warning<i class="details-icon fas fa-angle-right fa-fw" aria-hidden="true"></i>
        </div>
        <div class="details-content">
            <div class="admonition-content">注意!!最近幾年很少有 API Blueprint 工具，原因大多轉為 OpenAPI Specification (OAS)，此文章不建議使用，這邊只是特別留紀錄。</div>
        </div>
    </div>]]></description>
</item>
<item>
    <title>NET Core MVC 入門操作筆記</title>
    <link>https://malagege.github.io/blog/posts/NET-Core-MVC-%E5%85%A5%E9%96%80%E6%93%8D%E4%BD%9C%E7%AD%86%E8%A8%98/</link>
    <pubDate>Thu, 01 Dec 2022 18:15:44 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/NET-Core-MVC-%E5%85%A5%E9%96%80%E6%93%8D%E4%BD%9C%E7%AD%86%E8%A8%98/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/205041867-93ffe0d5-60e8-4d96-b2dd-40328554913a.png" referrerpolicy="no-referrer">
            </div><p>這邊使用 .Net Core 5 版本，Net Core 6 會不太一樣，大致原理都是一致的。這邊我觀看學習教學影片邊紀錄，我覺得動手做比較容易了解問題與忽略問題地方，我那個影片有操作一些錯誤地方，不是他忘記步驟，而是當我們忘記那些步驟可以快速從那個地方找出問題解決。</p>]]></description>
</item>
<item>
    <title>看 HTTP 和 HTTPS API 服務封包參數方法</title>
    <link>https://malagege.github.io/blog/posts/%E7%9C%8B-HTTP-%E5%92%8C-HTTPS-API-%E6%9C%8D%E5%8B%99%E5%B0%81%E5%8C%85%E5%8F%83%E6%95%B8%E6%96%B9%E6%B3%95/</link>
    <pubDate>Sun, 27 Jun 2021 14:46:39 &#43;0000</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/%E7%9C%8B-HTTP-%E5%92%8C-HTTPS-API-%E6%9C%8D%E5%8B%99%E5%B0%81%E5%8C%85%E5%8F%83%E6%95%B8%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<p>最近程式測試API，有時候好奇程式傳出去內容是否跟 Postman 一樣，但是 DEBUG 時候真的不方便。最近在想有什麼方法(或工具)可以做到?<br>
之前有看到有用 <code>SSLKEYLOGFILE</code> 可以用 Wireshark 解封包。<a href="https://www.facebook.com/119279178101235/videos/374050803968418" target="_blank" rel="noopener noreffer ">深入理解 TLS/SSL 安全加密協定</a><br>
雖然 Java 也有看到類似方法，但是要特別設定 <a href="https://jsslkeylog.github.io/" target="_blank" rel="noopener noreffer ">jSSLKeyLog</a>，還要安裝 Wireshark 軟體，所以覺得很麻煩?<br>
最近看有沒有比較簡單方式測試?稍微爬一下文整理</p>
<p><a href="https://stackoverflow.com/questions/5725430/http-test-server-accepting-get-post-requests/" target="_blank" rel="noopener noreffer ">HTTP test server accepting GET/POST requests - Stack Overflow</a></p>
<p>裡面看到 socat 大法最方便，可看封包又能轉傳！</p>]]></description>
</item>
<item>
    <title>API 防重放小記(replay attack)</title>
    <link>https://malagege.github.io/blog/posts/API-%E9%98%B2%E9%87%8D%E6%94%BE%E5%B0%8F%E8%A8%98-replay-attack/</link>
    <pubDate>Wed, 02 Jun 2021 20:32:43 &#43;0000</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/API-%E9%98%B2%E9%87%8D%E6%94%BE%E5%B0%8F%E8%A8%98-replay-attack/</guid>
    <description><![CDATA[<p>最近思考怎麼預防尾造 API 回傳內容，剛好看到這幾篇文章<br>
順便整理一下</p>]]></description>
</item>
</channel>
</rss>
