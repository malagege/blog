<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>.Net Core - Category - 程式狂想筆記</title>
        <link>https://malagege.github.io/blog/categories/.Net-Core/</link>
        <description>.Net Core - Category - 程式狂想筆記</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Sat, 26 Jul 2025 00:00:00 &#43;0800</lastBuildDate><atom:link href="https://malagege.github.io/blog/categories/.Net-Core/" rel="self" type="application/rss+xml" /><item>
    <title>.Net 開發非同步執行 ServiceProvider 寫入資料庫失敗問題</title>
    <link>https://malagege.github.io/blog/posts/dotnet-async-serviceprovider-db-fail/</link>
    <pubDate>Sat, 26 Jul 2025 00:00:00 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/dotnet-async-serviceprovider-db-fail/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://imgpoi.com/i/82XKZ2.png" referrerpolicy="no-referrer">
            </div><p>最近在專案中遇到一個有趣又棘手的問題：當我需要儲存多筆 NText 資料時，因為單次寫入會花上 3 秒以上，為了提升 API 回應速度，決定先回傳 response，再用非同步方式將資料寫入資料庫。沒想到偶爾（極低機率）會寫入失敗，而且 log 也沒有任何錯誤訊息。這到底是什麼原因？</p>]]></description>
</item>
<item>
    <title>Playwright 程式碼執行時發生記憶體不足錯誤</title>
    <link>https://malagege.github.io/blog/posts/Playwright_code_running_out_of_memory_error/</link>
    <pubDate>Sun, 12 Jan 2025 20:42:46 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/Playwright_code_running_out_of_memory_error/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/user-attachments/assets/cff6623d-b0be-4da5-8e41-466e10475dda" referrerpolicy="no-referrer">
            </div>最近 .Net 排成程式發生 OOM，奇怪我該關閉程式都有做，但我發現我少一個變數少做 using，所以造成問題。
觀察 我發現有多個子程序沒有關閉，我們從docker top {container_id}可以觀察子程序。忘記這個指令也可以從top、ps aux去做觀察。因為我這個排程每 15 分鐘會跑一次，所以放個3天就會發生。我們可以看到cli.js沒有關閉。
1 2 3 4 5 docker top webcrawlerapi-webcrawlerapi-1 UID PID PPID C STIME TTY TIME CMD root 137707 137686 7 21:30 ? 00:00:04 dotnet WebCrawlerApi.dll root 137757 137707 1 21:30 ? 00:00:01 /app/out/.playwright/node/linux-x64/node /app/out/.playwright/package/cli.js run-driver root 137832 137707 2 21:30 ? 00:00:01 /app/out/.playwright/node/linux-x64/node /app/out/.playwright/package/cli.js run-driver 這裡搜尋到很多程序，我懷疑這些是不是殭屍程式，這邊 Google 找到 Docker 子程序會有殭屍程式問題，但最後跟那個沒有關係。
我的程式如下:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 _logger.]]></description>
</item>
<item>
    <title>Entity Framework Core：FromSqlRaw 與 FromSqlInterpolated 的使用與差異</title>
    <link>https://malagege.github.io/blog/posts/entity-framework-core-fromsqlraw-and-fromsqlinterpolated/</link>
    <pubDate>Sun, 28 Jan 2024 21:11:27 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/entity-framework-core-fromsqlraw-and-fromsqlinterpolated/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://gist.github.com/assets/6058558/9a027353-a969-4a6a-bc93-88d425ffdf8e" referrerpolicy="no-referrer">
            </div><p>Entity Framework Core (EF Core) 是一個開源的、跨平台的資料庫存取技術，它可以讓開發者用 .NET 對資料庫進行操作，而不需要寫 SQL 語句。然而，有時候我們還是需要直接執行 SQL 查詢，這時候 EF Core 提供了 <code>FromSqlRaw</code> 和 <code>FromSqlInterpolated</code> 兩種方法。</p>
<p>這兩種方法的主要差異在於，<code>FromSqlRaw</code> 需要手動參數化查詢，而 <code>FromSqlInterpolated</code> 則會自動參數化查詢。如果不正確使用，可能會使應用程式暴露於 SQL 注入攻擊。</p>
<p>以下是一些使用這兩種方法的例子和解釋：</p>]]></description>
</item>
<item>
    <title>IIS 部署 .Net Core 設定環境變數方法</title>
    <link>https://malagege.github.io/blog/posts/IIS-%E4%BD%88%E7%BD%B2-Net-Core-%E8%A8%AD%E5%AE%9A%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E6%96%B9%E6%B3%95/</link>
    <pubDate>Sat, 07 Oct 2023 20:52:07 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/IIS-%E4%BD%88%E7%BD%B2-Net-Core-%E8%A8%AD%E5%AE%9A%E7%92%B0%E5%A2%83%E8%AE%8A%E6%95%B8%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/273387543-ac09d871-ae62-42b6-8f0c-01b4518cefff.png" referrerpolicy="no-referrer">
            </div><p>在驗證環境設定全域環境變數<code>ASPNETCORE_ENVIRONMENT=Staging</code>，但我看環境沒有生效&hellip;。我後來嘗試開exe有吃到，猜測是 <code>IIS</code> 問題，最後找到這篇。</p>
<p>參考:<a href="https://dotblogs.com.tw/Null/2020/08/10/103012" target="_blank" rel="noopener noreffer ">[IIS] 從IIS設定環境變數指定ASP.NET Core站台的執行環境 | Ian Chen - 點部落</a></p>]]></description>
</item>
<item>
    <title>C# CSV 分割字串 Split 逗號 比較安全轉換方法</title>
    <link>https://malagege.github.io/blog/posts/CSharp-CSV-%E5%88%86%E5%89%B2%E5%AD%97%E4%B8%B2-split-%E9%80%97%E8%99%9F-%E6%AF%94%E8%BC%83%E5%AE%89%E5%85%A8%E8%BD%89%E6%8F%9B%E6%96%B9%E6%B3%95/</link>
    <pubDate>Tue, 12 Sep 2023 21:19:01 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/CSharp-CSV-%E5%88%86%E5%89%B2%E5%AD%97%E4%B8%B2-split-%E9%80%97%E8%99%9F-%E6%AF%94%E8%BC%83%E5%AE%89%E5%85%A8%E8%BD%89%E6%8F%9B%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/267342634-779312ef-17d5-482c-ad48-aceffe4864a9.png" referrerpolicy="no-referrer">
            </div><p>一般我常見程式解析 csv 程式都是用 <code>split(',')</code> 去解析不同欄位資料，但有經驗的工程師知道這個不是一個安全作法，可能會找額外 csvParse工具來解析。今天我看舊程式遇到這種方法，剛好有bug要解這個，有看到網路有一種比較安全轉換方法。</p>]]></description>
</item>
<item>
    <title>AspNetCoreRateLimit 使用小記</title>
    <link>https://malagege.github.io/blog/posts/AspNetCoreRateLimit-%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%A8%98/</link>
    <pubDate>Mon, 28 Aug 2023 21:21:06 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/AspNetCoreRateLimit-%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%A8%98/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/263715722-50cf709d-1541-4485-a7cd-5893672578db.png" referrerpolicy="no-referrer">
            </div><p>之前看很多樂觀鎖都是做防止修改同一筆資料，但最近同事之前用 RateLimit 預防前端遇到連點新增兩筆資料，這次專案我也類似用這個方法，前端程式我非能控制，這邊後端用這個方法做個補強。</p>]]></description>
</item>
<item>
    <title>Net 5 TimeSpan 做 Json 序列化引發的慘劇</title>
    <link>https://malagege.github.io/blog/posts/Net-5-TimeSpan-%E5%81%9A-Json-%E5%BA%8F%E5%88%97%E5%8C%96%E5%BC%95%E7%99%BC%E7%9A%84%E6%85%98%E5%8A%87/</link>
    <pubDate>Sun, 27 Aug 2023 22:50:28 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/Net-5-TimeSpan-%E5%81%9A-Json-%E5%BA%8F%E5%88%97%E5%8C%96%E5%BC%95%E7%99%BC%E7%9A%84%E6%85%98%E5%8A%87/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/263536638-60dcd420-73b5-4898-b21e-ba5906d2cc70.png" referrerpolicy="no-referrer">
            </div><p>最近因為用兩層緩存，第一層會抓 Memory Cache，沒有資料會抓第二層 SQL Server Cache，在沒有資料會抓取 API 相關資料，簡單多層緩存功能。因為 <code>IDistributedCache</code> 無法抓取到資料庫該 key 設定的資料，這邊有把 <code>DistributedCacheEntryOptions</code>做 Json 序列化衍生這次慘劇。</p>]]></description>
</item>
<item>
    <title>ASP.NET Core 中間件(Middleware)</title>
    <link>https://malagege.github.io/blog/posts/ASP.NET-Core-%E4%B8%AD%E9%96%93%E4%BB%B6-Middleware/</link>
    <pubDate>Thu, 22 Jun 2023 21:57:40 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/ASP.NET-Core-%E4%B8%AD%E9%96%93%E4%BB%B6-Middleware/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/247953536-abec583f-0bbe-4d31-94f6-34a25b8724d2.png" referrerpolicy="no-referrer">
            </div><p>中間件(Middleware)在程式架構上設計是很重要功能，之前我在學習 Spring Boot 對應 Request 所對應處理都使用 AOP，AOP概念很像 Middleware，但還是有點差異的，要如何使用 Middleware 讓開發程式更有效率、簡單，不需要異動程式這是很重要的。</p>
<p>這個筆記很久之前就寫完了，但想說有空再整理一下，結果都沒改什麼東西。最近剛好寫中間件文章，覺得還是整理出來好了。</p>]]></description>
</item>
<item>
    <title>.Net Core Middleware 擷取 Request 參數</title>
    <link>https://malagege.github.io/blog/posts/Net-Core-Middleware-%E6%93%B7%E5%8F%96-Request-%E5%8F%83%E6%95%B8/</link>
    <pubDate>Thu, 22 Jun 2023 21:46:35 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/Net-Core-Middleware-%E6%93%B7%E5%8F%96-Request-%E5%8F%83%E6%95%B8/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/247950362-b377fa29-b52e-4e40-a677-113cb5e1cf93.png" referrerpolicy="no-referrer">
            </div><p>相信大家前期 debug 需要做這些事情，有時候每隻寫一隻印出來，不如全部印出來。但我不建議全部印出來。</p>]]></description>
</item>
<item>
    <title>.Net 紀錄訪問 Server Request Response Body 方法</title>
    <link>https://malagege.github.io/blog/posts/Net-%E7%B4%80%E9%8C%84%E8%A8%AA%E5%95%8F-Server-Request-Response-body-%E6%96%B9%E6%B3%95/</link>
    <pubDate>Thu, 22 Jun 2023 21:41:07 &#43;0800</pubDate>
    <author>malagege</author>
    <guid>https://malagege.github.io/blog/posts/Net-%E7%B4%80%E9%8C%84%E8%A8%AA%E5%95%8F-Server-Request-Response-body-%E6%96%B9%E6%B3%95/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="https://user-images.githubusercontent.com/6058558/247949015-5dbd3cc2-5892-4748-b4ac-2259d1ea33c0.png" referrerpolicy="no-referrer">
            </div><p>常常我們維運時候，沒有記錄一些 log，遇到問題也不知道發生了什麼。最近做一個專案被告知需要紀錄這些資訊，怕線上遇到問題不知道是什麼問題就很難處理。</p>]]></description>
</item>
</channel>
</rss>
