<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>Python - Category - 程式狂想筆記</title><link>https://malagege.github.io/blog/categories/Python/</link><description>Python - Category - 程式狂想筆記</description><generator>Hugo -- gohugo.io</generator><language>zh-tw</language><lastBuildDate>Mon, 04 May 2015 07:14:00 +0000</lastBuildDate><atom:link href="https://malagege.github.io/blog/categories/Python/" rel="self" type="application/rss+xml"/><item><title>[Python]Conditional expressions和Generator expressions</title><link>https://malagege.github.io/blog/posts/logdown/2015-05-04-python-conditional-expressions-and-generator-expressions/</link><pubDate>Mon, 04 May 2015 07:14:00 +0000</pubDate><author>malagege</author><guid>https://malagege.github.io/blog/posts/logdown/2015-05-04-python-conditional-expressions-and-generator-expressions/</guid><description><![CDATA[<p>之前網路上看到if 和for一行寫法<br>
今天Google找了一下，發現找不到東西<br>
KeyWord:if for one line | if for one statement</p>
<p>最後在Python3文件找到<a href="https://docs.python.org/3/reference/expressions.html" target="_blank" rel="noopener noreffer ">Expressions</a></p>]]></description></item><item><title>[Python]dict排序筆記</title><link>https://malagege.github.io/blog/posts/logdown/2015-05-04-pythondict-sort-records/</link><pubDate>Mon, 04 May 2015 02:54:00 +0000</pubDate><author>malagege</author><guid>https://malagege.github.io/blog/posts/logdown/2015-05-04-pythondict-sort-records/</guid><description><![CDATA[最近突然想到以前有在網路看到Dict做排序
覺得這些以後還用的到
所以記錄一下&hellip;
1 2 3 4 5 6 #http://www.saltycrane.com/blog/2007/09/how-to-sort-python-dictionary-by-keys/ for key in sorted(mydict.iterkeys()): print &#34;%s: %s&#34; % (key, mydict[key]) for key, value in sorted(mydict.iteritems(), key=lambda (k,v): (v,k)): print &#34;%s: %s&#34; % (key, value) 寫成現有method
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 #http://code.activestate.com/recipes/52306-to-sort-a-dictionary/ # (IMHO) the simplest approach: def sortedDictValues1(adict): items = adict.items() items.sort() return [value for key, value in items] # an alternative implementation, which # happens to run a bit faster for large # dictionaries on my machine: def sortedDictValues2(adict): keys = adict.]]></description></item><item><title>[Python]正規化complie用法</title><link>https://malagege.github.io/blog/posts/logdown/2015-04-26-python-the-normalised-complie-usage/</link><pubDate>Sun, 26 Apr 2015 11:43:00 +0000</pubDate><author>malagege</author><guid>https://malagege.github.io/blog/posts/logdown/2015-04-26-python-the-normalised-complie-usage/</guid><description>http://www.cnblogs.com/huxi/archive/2010/07/04/1771073.html</description></item><item><title>[Python]使用pyDes.py動態加密解密</title><link>https://malagege.github.io/blog/posts/logdown/2015-04-26-python-use-pydespy-encryption-and-decryption/</link><pubDate>Sun, 26 Apr 2015 07:55:00 +0000</pubDate><author>malagege</author><guid>https://malagege.github.io/blog/posts/logdown/2015-04-26-python-use-pydespy-encryption-and-decryption/</guid><description><![CDATA[pyDes Github
1 2 3 4 5 6 7 8 9 10 11 from pyDes import * import base64 import time import random data =str(random.random())+&#34;|&#34;+&#34;加密內容&#34; k = des(&#39;DESCRYPT&#39;, CBC, &#39;12345675&#39;, pad=None, padmode=PAD_PKCS5) d = k.encrypt(data) print &#34;Encrypted: %r&#34; % base64.b64encode(d) print &#34;Decrypted: %r&#34; % k.decrypt(d) ]]></description></item><item><title>[Python]圖片轉成base64碼</title><link>https://malagege.github.io/blog/posts/logdown/2014-11-20-python-picture-converted-to-base64-code/</link><pubDate>Thu, 20 Nov 2014 02:36:00 +0000</pubDate><author>malagege</author><guid>https://malagege.github.io/blog/posts/logdown/2014-11-20-python-picture-converted-to-base64-code/</guid><description><![CDATA[實作異常的順力^^
1 2 3 4 5 6 7 import base64 fp = open(&#34;a.jpg&#34;,&#34;rb&#34;) img = fp.read() fp.close() print(base64.b64encode(img)) 在接下來使用requests來實作
1 2 imgdata = requests.get(imgurl).content imgb64 = base64.b64encode(imgdata) 完成:D]]></description></item><item><title>[Python]文件儲存unicode碼的問題</title><link>https://malagege.github.io/blog/posts/logdown/2014-11-19-python-files-store-unicode-codes-problem/</link><pubDate>Wed, 19 Nov 2014 06:50:00 +0000</pubDate><author>malagege</author><guid>https://malagege.github.io/blog/posts/logdown/2014-11-19-python-files-store-unicode-codes-problem/</guid><description><![CDATA[<p>由於用網頁爬蟲抓取的資料存入json<br>
文件都會顯示<code>&quot;{artist&quot;: &quot;\u3058\u3093&quot;}</code><br>
但程式抓取都不會有亂碼的問題</p>
<p>但今天我Google大神一個整天<br>
終於找到方法</p>
<div class="highlight"><div class="chroma">
<table class="lntable"><tr><td class="lntd">
<pre tabindex="0" class="chroma"><code><span class="lnt">1
</span></code></pre></td>
<td class="lntd">
<pre tabindex="0" class="chroma"><code class="language-python" data-lang="python"><span class="line"><span class="cl"><span class="nb">str</span><span class="o">.</span><span class="n">encode</span><span class="p">()</span><span class="o">.</span><span class="n">decode</span><span class="p">(</span><span class="s1">&#39;unicode_escape&#39;</span><span class="p">)</span>
</span></span></code></pre></td></tr></table>
</div>
</div>]]></description></item><item><title>[Python]使用requests、BeautifulSoup當網頁爬蟲</title><link>https://malagege.github.io/blog/posts/logdown/2014-11-18-python-using-beautifulsoup-and-requests-when-crawler/</link><pubDate>Tue, 18 Nov 2014 05:40:00 +0000</pubDate><author>malagege</author><guid>https://malagege.github.io/blog/posts/logdown/2014-11-18-python-using-beautifulsoup-and-requests-when-crawler/</guid><description><![CDATA[<p>上次參加COSCUP 2014時候，<a href="http://www.slideshare.net/daikeren/news-37154830" target="_blank" rel="noopener noreffer ">電腦不只會幫你選土豆，還會幫你選新聞</a><br>
最近無聊做個小實驗<br>
使用requests、BeautifulSoup實作抓資料存成json<br>
結果發現不會太難</p>]]></description></item><item><title>[Python] 查詢本機IP</title><link>https://malagege.github.io/blog/posts/logdown/2014-10-24-python-querying-native-ip/</link><pubDate>Fri, 24 Oct 2014 02:17:00 +0000</pubDate><author>malagege</author><guid>https://malagege.github.io/blog/posts/logdown/2014-10-24-python-querying-native-ip/</guid><description><![CDATA[1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import urllib,random,re ip_regex = re.compile(&#34;(([0-9]{1,3}\.){3}[0-9]{1,3})&#34;) def public_ip(): &#39;&#39;&#39; Returns your public IP address. Output: The IP address in string format. None if not internet connection available. &#39;&#39;&#39; # List of host which return the public IP address: hosts = &#34;&#34;&#34;http://www.]]></description></item></channel></rss>